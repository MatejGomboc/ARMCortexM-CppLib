import lit.formats
import os

config.name = "asm-tests"
config.test_format = lit.formats.ShTest()
config.suffixes = [".cpp"]
config.test_source_root = os.path.dirname(__file__)
config.test_exec_root = "@CMAKE_CURRENT_BINARY_DIR@"

if ("@ARM_CORTEX_M_ARCH@" == "0"):
    arch_flag = "-mcpu=cortex-m0"
elif ("@ARM_CORTEX_M_ARCH@" == "0+"):
    arch_flag = "-mcpu=cortex-m0plus"
elif ("@ARM_CORTEX_M_ARCH@" == "1"):
    arch_flag = "-mcpu=cortex-m1"
elif ("@ARM_CORTEX_M_ARCH@" == "3"):
    arch_flag = "-mcpu=cortex-m3"
else:
    lit_config.fatal("Invalid ARM Cortex-M architecture selected: " + "@ARM_CORTEX_M_ARCH@")

config.substitutions.append(("%arch_flag%", arch_flag))

if ("@CMAKE_BUILD_TYPE@" == "Debug"):
    build_type_specific_flags = "@CMAKE_CXX_FLAGS_DEBUG@"
elif ("@CMAKE_BUILD_TYPE@" == "Release"):
    build_type_specific_flags = "@CMAKE_CXX_FLAGS_RELEASE@"
elif ("@CMAKE_BUILD_TYPE@" == "RelWithDebInfo"):
    build_type_specific_flags = "@CMAKE_CXX_FLAGS_RELWITHDEBINFO@"
elif ("@CMAKE_BUILD_TYPE@" == "MinSizeRel"):
    build_type_specific_flags = "@CMAKE_CXX_FLAGS_MINSIZEREL@"
else:
    lit_config.fatal("Invalid CMake build type: " + "@CMAKE_BUILD_TYPE@")

config.substitutions.append(("%default_flags%", "@CMAKE_CXX_FLAGS@ " + build_type_specific_flags))
