# Renode script to run Cortex-M0+ tests

# Create machine
mach create "cortex-m0plus-test"

# Load platform
machine LoadPlatformDescription @cortex_m0plus_test_platform.repl

# Configure test output to save to file
testOutput CreateFileBackend @test_output.txt true

# Load the test binary
$bin?=@../build/m0plus_tests

macro reset
"""
    sysbus LoadELF $bin
"""

runMacro $reset

# Enable logging
logLevel -1 testOutput  

# Python monitor for test completion
python """
global test_complete_addr
global test_result_addr

test_complete_addr = 0x40001000
test_result_addr = None

def find_test_results():
    """Search RAM for test result structure"""
    global test_result_addr
    
    # Search first 8KB of RAM for test results
    for addr in range(0x20000000, 0x20002000, 4):
        try:
            total = sysbus.ReadDoubleWord(addr)
            passed = sysbus.ReadDoubleWord(addr + 4)
            failed = sysbus.ReadDoubleWord(addr + 8)
            
            # Validate reasonable test counts
            if 0 < total < 1000 and total == (passed + failed):
                test_result_addr = addr
                return True
        except:
            pass
    return False

def check_test_complete():
    """Check if tests completed and print results"""
    global test_complete_addr
    global test_result_addr
    
    try:
        flag = sysbus.ReadDoubleWord(test_complete_addr)
        if flag == 0xDEADBEEF:
            print("\n" + "="*40)
            print("TEST EXECUTION COMPLETE")
            print("="*40)
            
            if find_test_results():
                total = sysbus.ReadDoubleWord(test_result_addr)
                passed = sysbus.ReadDoubleWord(test_result_addr + 4)
                failed = sysbus.ReadDoubleWord(test_result_addr + 8)
                
                # Read test state string
                state = ""
                for i in range(64):
                    b = sysbus.ReadByte(test_result_addr + 12 + i)
                    if b == 0:
                        break
                    state += chr(b)
                
                print(f"Total Tests: {total}")
                print(f"Passed:      {passed}")
                print(f"Failed:      {failed}")
                print(f"Final State: {state}")
                print("="*40)
                
                if failed == 0:
                    print("RESULT: ALL TESTS PASSED ✓")
                    self.machine.Pause()
                    Exit()
                else:
                    print("RESULT: SOME TESTS FAILED ✗")
                    self.machine.Pause()
                    Exit(1)
            else:
                print("ERROR: Could not find test results in memory")
                self.machine.Pause()
                Exit(2)
    except Exception as e:
        # Ignore exceptions during normal execution
        pass
"""

# Set up periodic check for completion
machine CreateExecutionModeController "test_monitor" 10000  # Check every 10ms
test_monitor Command "python check_test_complete()"

# Watchdog timer - stop after 10 seconds
machine CreateExecutionModeController "watchdog" 10000000000  # 10 seconds
watchdog Command "echo 'TEST TIMEOUT!'; quit 3"

echo "Starting Cortex-M0+ library tests..."
echo "Test output will be saved to: test_output.txt"
echo ""

# Start the simulation
start
