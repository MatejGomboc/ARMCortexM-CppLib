name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  test:
    name: Test (ARM Cortex-M${{ matrix.arch }}, ${{ matrix.build_type }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false # Don't cancel other jobs if one fails.
      matrix:
        # arch: ["0", "0+", "1", "3"]
        arch: ["0+"]
        # build_type: [Debug, Release, MinSizeRel, RelWithDebInfo]
        build_type: [MinSizeRel]
      max-parallel: 20 # Use maximum possible parallelization.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true # Ensure we get a fresh checkout every time
          fetch-depth: 0  # Full history for better debugging if needed

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-arm-none-eabi binutils-arm-none-eabi python3 python3-pip

      - name: Install FileCheck
        run: |
          pip3 install --no-cache-dir filecheck

      - name: Configure CMake
        run: |
          cmake --preset=multi -DARM_CORTEX_M_ARCH="${{ matrix.arch }}" -DBUILD_ARM_CORTEX_M_TESTS=ON

      - name: Build
        run: |
          # Map build_type to the correct preset name
          if [ "${{ matrix.build_type }}" = "Debug" ]; then
            BUILD_PRESET="multi-debug"
          elif [ "${{ matrix.build_type }}" = "Release" ]; then
            BUILD_PRESET="multi-release"
          elif [ "${{ matrix.build_type }}" = "MinSizeRel" ]; then
            BUILD_PRESET="multi-minsizerel"
          elif [ "${{ matrix.build_type }}" = "RelWithDebInfo" ]; then
            BUILD_PRESET="multi-relwithdebinfo"
          fi

          cmake --build --preset=$BUILD_PRESET --parallel $(nproc)

      - name: Run tests
        working-directory: build-multi
        run: |
          ctest -C ${{ matrix.build_type }} --output-on-failure --verbose --parallel $(nproc)

    #   - name: Upload test results on failure
    #     if: failure()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: test-results-cortexm${{ matrix.arch }}-${{ matrix.build_type }}
    #       path: |
    #         build-multi/Testing/Temporary/LastTest.log
    #         build-multi/**/*.asm

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed. Check the logs for details."
            exit 1
          fi
